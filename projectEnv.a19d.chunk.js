(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{331:function(e,n,l){"use strict";l.r(n);var t=l(0);n.default=t.createElement("div",{className:"markdown-body"},t.createElement("div",null,t.createElement("h1",null,"Env"),t.createElement("p",null,"You can use environment variable from ",t.createElement("code",null,"pri/client"),":"),t.createElement("pre",null,t.createElement("code",{className:"language-typescript"},t.createElement("span",{className:"hljs-comment"},"// ./src/pages/index.tsx"),"\n",t.createElement("span",{className:"hljs-keyword"},"import")," ","{"," env ","}"," ",t.createElement("span",{className:"hljs-keyword"},"from")," ",t.createElement("span",{className:"hljs-string"},"'pri/client'"),";","\n","\n",t.createElement("span",{className:"hljs-keyword"},"if")," (env.isLocal) ","{","\n","  ",t.createElement("span",{className:"hljs-built_in"},"console"),".log(",t.createElement("span",{className:"hljs-string"},'"I\'m running in local now!"'),");","\n","}","\n","\n",t.createElement("span",{className:"hljs-keyword"},"if")," (env.isProd) ","{","\n","  ",t.createElement("span",{className:"hljs-built_in"},"console"),".log(",t.createElement("span",{className:"hljs-string"},'"I\'m running in production now!"'),");","\n","}","\n","\n",t.createElement("span",{className:"hljs-built_in"},"console"),".log(",t.createElement("span",{className:"hljs-string"},"'Custom env'"),", env.get(",t.createElement("span",{className:"hljs-string"},"'theme'"),"));","\n")),t.createElement("p",null,t.createElement("code",null,"pri/client")," has some built-in env, like ",t.createElement("code",null,"isLocal")," and ",t.createElement("code",null,"isProd"),"."),t.createElement("p",null,"When execute ",t.createElement("code",null,"npm start"),", ",t.createElement("code",null,"env.isLocal === true"),", when execute ",t.createElement("code",null,"npm run build")," or ",t.createElement("code",null,"npm run preview"),", ",t.createElement("code",null,"env.isProd === true"),"."),t.createElement("p",null,"You can also set your own custom env variable in config files, and get them by using ",t.createElement("code",null,"env.get()"),"."),t.createElement("pre",null,t.createElement("code",{className:"language-typescript"},t.createElement("span",{className:"hljs-comment"},"// ./pri.config.ts"),"\n",t.createElement("span",{className:"hljs-keyword"},"import")," ","{"," ProjectConfig ","}"," ",t.createElement("span",{className:"hljs-keyword"},"from")," ",t.createElement("span",{className:"hljs-string"},"'pri/client'"),";","\n","\n",t.createElement("span",{className:"hljs-keyword"},"export")," ",t.createElement("span",{className:"hljs-keyword"},"default")," ","{","\n","  ",t.createElement("span",{className:"hljs-attr"},"env"),": ","{","\n","    ",t.createElement("span",{className:"hljs-attr"},"theme"),": ",t.createElement("span",{className:"hljs-string"},"'One Dark'"),"\n","  ","}","\n","}"," ",t.createElement("span",{className:"hljs-keyword"},"as")," ProjectConfig;","\n")),t.createElement("ul",null,t.createElement("li",null,"After running ",t.createElement("code",null,"npm start"),", ",t.createElement("code",null,"env.get()")," will get from the map merged by ",t.createElement("code",null,"config.local.ts")," and ",t.createElement("code",null,"config.default.ts")),t.createElement("li",null,"After running ",t.createElement("code",null,"npm run build"),", ",t.createElement("code",null,"env.get()")," will get from the map merged by ",t.createElement("code",null,"config.prod.ts")," and ",t.createElement("code",null,"config.default.ts")))))}}]);