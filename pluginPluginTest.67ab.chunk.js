(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([[10],{176:function(s,n){s.exports='\n                  <div class="markdown-body">\n                    <h1>Plugin test</h1>\n<p>Itâ€™s recommended to write plug-ins in units of function. For example judege whether there is a <code>components</code> folder:</p>\n<p><strong><code>src/methods.ts</code></strong></p>\n<pre><code class="language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">judgeHasComponents</span>(<span class="hljs-params">projectRootPath: string, files: path.ParsedPath[]</span>) </span>{\n  <span class="hljs-keyword">return</span> files.some(<span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> {\n    <span class="hljs-keyword">const</span> relativePath = path.relative(projectRootPath, path.join(file.dir, file.name))\n    <span class="hljs-keyword">if</span> (relativePath.startsWith(<span class="hljs-string">"src/components"</span>)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>\n  })\n}\n</code></pre>\n<p>So we can test it completely:</p>\n<p><strong><code>tests/index.ts</code></strong></p>\n<pre><code class="language-typescript">test(<span class="hljs-string">"Multiple files"</span>, t =&gt; {\n  <span class="hljs-keyword">const</span> relativeProjectFiles = [\n    <span class="hljs-string">"src/components/index.tsx"</span>,\n    <span class="hljs-string">"src/components/button/index.tsx"</span>,\n    <span class="hljs-string">"src/components/select/index.tsx"</span>\n  ]\n  t.true(judgeHasComponents(testProjectRootPath, testFilePaths(relativeProjectFiles)))\n})\n</code></pre>\n<p>And we can safely use this <code>judgeHasComponents</code> function:</p>\n<p><strong><code>./src/plugin/index.ts</code></strong></p>\n<pre><code class="language-typescript">pri.project.onAnalyseProject(<span class="hljs-function"><span class="hljs-params">files</span> =&gt;</span> {\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">customPlugin</span>: {\n      <span class="hljs-attr">hasComponents</span>: judgeHasComponents(projectRootPath, files)\n    }\n  }\n})\n</code></pre>\n<h2>Run test</h2>\n<pre><code class="language-bash">npm <span class="hljs-built_in">test</span>\n</code></pre>\n<pre><code class="language-bash">  3 passed\n------------|----------|----------|----------|----------|-------------------|\n| File         | % Stmts    | % Branch   | % Funcs    | % Lines    | Uncovered Line <span class="hljs-comment">#s   |</span>\n| ------------ | ---------- | ---------- | ---------- | ---------- | ------------------- |\n| All files    | 100        | 100        | 100        | 100        |                     |\n| methods.ts   | 100        | 100        | 100        | 100        |                     |\n| ------------ | ---------- | ---------- | ---------- | ---------- | ------------------- |\n</code></pre>\n\n                  </div>\n              '}}]);