(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{165:function(s,o){s.exports='<h1>Build</h1>\n<p>You can control build behaviors.</p>\n<h2>pipeConfig</h2>\n<p>Change webpack config by using <code>pipeConfig</code>:</p>\n<pre><code class="language-typescript"><span class="hljs-keyword">import</span> { pri } <span class="hljs-keyword">from</span> <span class="hljs-string">\'pri\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (instance: <span class="hljs-keyword">typeof</span> pri) =&gt; {\n  instance.build.pipeConfig(<span class="hljs-function">(<span class="hljs-params">env, config</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> {\n      ...config\n      <span class="hljs-comment">// your custom options..</span>\n    };\n  });\n};\n</code></pre>\n<h2>Other configuration modification</h2>\n<p>Some times, we want to modified some loaderâ€™s options instead of the hold config, so we provide some other methods to do this.</p>\n<h3>pipeStyleLoaderOptions</h3>\n<p><code>.build.pipeStyleLoaderOptions</code> allow you to modify the options of <code>style-loader</code>.</p>\n<h3>pipeCssLoaderOptions</h3>\n<p><code>.build.pipeCssLoaderOptions</code> allow you to modify the options of <code>css-loader</code>.</p>\n<h3>pipeSassLoaderOptions</h3>\n<p><code>.build.pipeSassLoaderOptions</code> allow you to modify the options of <code>sass-loader</code>.</p>\n<h3>pipeLessLoaderOptions</h3>\n<p><code>.build.pipeLessLoaderOptions</code> allow you to modify the options of <code>less-loader</code>.</p>\n<h3>pipeBabelLoaderOptions</h3>\n<p><code>.build.pipeBabelLoaderOptions</code> allow you to modify the options of <code>babel-loader</code>.</p>\n<h3>pipeTsLoaderOptions</h3>\n<p><code>.build.pipeTsLoaderOptions</code> allow you to modify the options of <code>ts-loader</code>.</p>\n<p>For example:</p>\n<pre><code class="language-typescript"><span class="hljs-keyword">import</span> { pri } <span class="hljs-keyword">from</span> <span class="hljs-string">\'pri\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (instance: <span class="hljs-keyword">typeof</span> pri) =&gt; {\n  instance.build.pipeTsLoaderOptions(<span class="hljs-function">(<span class="hljs-params">env, options</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> {\n      ...options\n      <span class="hljs-comment">// your custom options..</span>\n    };\n  });\n};\n</code></pre>\n<h2>afterProdBuild</h2>\n<p>You can assets all the chunk file list or get caches after prod build by using <code>afterProdBuild</code>. For example:</p>\n<pre><code class="language-typescript"><span class="hljs-keyword">import</span> { pri } <span class="hljs-keyword">from</span> <span class="hljs-string">\'pri\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (instance: <span class="hljs-keyword">typeof</span> pri) =&gt; {\n  instance.build.afterProdBuild(<span class="hljs-function"><span class="hljs-params">stats</span> =&gt;</span> {\n    <span class="hljs-built_in">console</span>.log(stats.hash); <span class="hljs-comment">// Get hash name.</span>\n    <span class="hljs-built_in">console</span>.log(stats.assetsByChunkName); <span class="hljs-comment">// Get thunks list.</span>\n  });\n};\n</code></pre>\n<p>For more about <code>stats</code>, please see <a href="https://webpack.js.org/api/stats/#structure">webpack docs</a>.</p>\n'}}]);