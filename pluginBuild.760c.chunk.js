(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{175:function(o,n,e){"use strict";e.r(n),n.default="# Build\n\nYou can control build behaviors.\n\n## pipeConfig\n\nChange webpack config by using `pipeConfig`:\n\n```typescript\nimport { pri } from 'pri';\n\nexport default (instance: typeof pri) => {\n  instance.build.pipeConfig((env, config) => {\n    return {\n      ...config\n      // your custom options..\n    };\n  });\n};\n```\n\n## Other configuration modification\n\nSome times, we want to modified some loader's options instead of the hold config, so we provide some other methods to do this.\n\n### pipeStyleLoaderOptions\n\n`.build.pipeStyleLoaderOptions` allow you to modify the options of `style-loader`.\n\n### pipeCssLoaderOptions\n\n`.build.pipeCssLoaderOptions` allow you to modify the options of `css-loader`.\n\n### pipeSassLoaderOptions\n\n`.build.pipeSassLoaderOptions` allow you to modify the options of `sass-loader`.\n\n### pipeLessLoaderOptions\n\n`.build.pipeLessLoaderOptions` allow you to modify the options of `less-loader`.\n\n### pipeBabelLoaderOptions\n\n`.build.pipeBabelLoaderOptions` allow you to modify the options of `babel-loader`.\n\n### pipeTsLoaderOptions\n\n`.build.pipeTsLoaderOptions` allow you to modify the options of `ts-loader`.\n\nFor example:\n\n```typescript\nimport { pri } from 'pri';\n\nexport default (instance: typeof pri) => {\n  instance.build.pipeTsLoaderOptions((env, options) => {\n    return {\n      ...options\n      // your custom options..\n    };\n  });\n};\n```\n\n## afterProdBuild\n\nYou can assets all the chunk file list or get caches after prod build by using `afterProdBuild`. For example:\n\n```typescript\nimport { pri } from 'pri';\n\nexport default (instance: typeof pri) => {\n  instance.build.afterProdBuild(stats => {\n    console.log(stats.hash); // Get hash name.\n    console.log(stats.assetsByChunkName); // Get thunks list.\n  });\n};\n```\n\nFor more about `stats`, please see [webpack docs](https://webpack.js.org/api/stats/#structure).\n"}}]);