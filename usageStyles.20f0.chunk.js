(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([[39],{143:function(s,n){s.exports='\n                  <div class="markdown-body">\n                    <h1>Styles</h1>\n<p>We use <a href="https://github.com/css-modules/css-modules">css-modules</a> to write styles.</p>\n<pre><code>.\n├── src\n│   └── pages\n│         ├── index.tsx\n│         └── index.css         # Style file\n└── priconfig.json\n</code></pre>\n<blockquote>\n<p>If you use <code>css-in-js</code> such as <a href="https://github.com/styled-components/styled-components">styled-components</a>, you can skip this introduction.</p>\n</blockquote>\n<h2>sass</h2>\n<pre><code>.\n├── src\n│   └── pages\n│         ├── index.tsx\n│         └── index.scss         # Scss file\n└── priconfig.json\n</code></pre>\n<p>To use sass, you should install <code>node-sass</code> <code>sass-loader</code>:</p>\n<pre><code class="language-shell">npm i node-sass sass-loader --save\n</code></pre>\n<h2>less</h2>\n<pre><code>.\n├── src\n│   └── pages\n│         ├── index.tsx\n│         └── index.less         # Less file\n└── priconfig.json\n</code></pre>\n<p>To use less, you should install <code>less-loader</code>:</p>\n<pre><code class="language-shell">npm i less-loader --save\n</code></pre>\n<h2>css</h2>\n<p>Already support.</p>\n<h2>Usage</h2>\n<p>You can import <code>css</code> files into JSX file.</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.button</span> {\n  <span class="hljs-attribute">color</span>: red;\n}\n</code></pre>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./index.css\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"button"</span> /&gt;</span>;\n</span></code></pre>\n<h2>Css Modules Usage</h2>\n<p>If set <code>enableCssModules: true</code>, will enable <a href="https://github.com/css-modules/css-modules">CSS Modules</a>.</p>\n<p>For example, we have 3 files named <code>src/index.tsx</code>、<code>src/input.css</code>、<code>src/button.scss</code>, the two style files:</p>\n<p><strong>src/input.css:</strong></p>\n<pre><code class="language-css"><span class="hljs-selector-tag">input</span> {\n  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;\n}\n</code></pre>\n<p><strong>src/button.scss:</strong></p>\n<pre><code class="language-scss"><span class="hljs-selector-tag">button</span> {\n  <span class="hljs-attribute">color</span>: blue;\n  &amp;:hover {\n    <span class="hljs-attribute">color</span>: red;\n  }\n}\n</code></pre>\n<p>Here we use it in <strong>src/index.tsx:</strong></p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> inputStyles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./input.css\'</span>;\n<span class="hljs-keyword">import</span> buttonStyles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./button.scss\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{inputStyles.input}</span>&gt;</span>input<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{buttonStyles.button}</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n);\n</code></pre>\n<p>For project type, just run <code>npm start</code>, for component type, just run <code>npm run docs</code>, it’s as simple as that.</p>\n<h2>Compile</h2>\n<p>Css is compiled by <code>css-module</code> rules:</p>\n<p><strong>Any css file:</strong></p>\n<pre><code class="language-scss"><span class="hljs-selector-class">.container</span> {\n  <span class="hljs-attribute">color</span>: red;\n}\n</code></pre>\n<p>Will compile to:</p>\n<pre><code class="language-css"><span class="hljs-selector-class">.some-path-style-container-22VSk</span> {\n  <span class="hljs-attribute">color</span>: red;\n}\n</code></pre>\n<p><strong>Any ts file:</strong></p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./some-path/style.scss\'</span>\n\n<span class="hljs-keyword">export</span> () =&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.container}</span> /&gt;</span>\n</span></code></pre>\n<p>Will compile to:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./some-path/style.scss\'</span>\n\n<span class="hljs-keyword">export</span> () =&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"some-path-style-container-22VSk"</span> /&gt;</span>\n</span></code></pre>\n<p>Don’t worry, <code>css-modules</code> won’t take effect in <code>node_modules</code>, so the following css will be output directly without processing:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> <span class="hljs-string">\'antd/dist/antd.css\'</span>;\n</code></pre>\n<h2>Css extract</h2>\n<p>If you set <code>cssExtract: true</code> in config, you will get a extra css file.</p>\n<p>If <code>cssExtract: false</code>, all css will auto imported by import js.</p>\n<blockquote>\n<p>You can set <code>outFileName</code> and <code>outCssFileName</code> to rename out css name.</p>\n</blockquote>\n<h2>Deploy component</h2>\n<p>You have two way to create usage for component style.</p>\n<p>Here is your component <code>my-component</code> code example:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> inputStyles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./input.css\'</span>;\n<span class="hljs-keyword">import</span> buttonStyles <span class="hljs-keyword">from</span> <span class="hljs-string">\'./button.scss\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; (\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{inputStyles.input}</span>&gt;</span>input<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{buttonStyles.button}</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n);\n</code></pre>\n<p>If you set <code>cssExtract: false</code> (default), we can use it just by import entry file:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> MyComponent <span class="hljs-keyword">from</span> <span class="hljs-string">\'my-component\'</span> <span class="hljs-comment">// All css will be injected dynamically.</span>\n\nReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>&gt;</span>, dom)\n</span></code></pre>\n<p>If you set <code>cssExtract: true</code>, all CSS files will be picked to <code>my-component/dist/index.css</code>:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> MyComponent <span class="hljs-keyword">from</span> <span class="hljs-string">\'my-component\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'my-component/dist/index.css\'</span> <span class="hljs-comment">// Import static css file.</span>\n\nReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>&gt;</span>, dom)\n</span></code></pre>\n\n                  </div>\n              '}}]);