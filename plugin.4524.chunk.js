(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([[2],{170:function(n,s){n.exports='\n                  <div class="markdown-body">\n                    <h1>Plugin setup</h1>\n<p>It’s easy to expand the commander, analyse project files, and modifying the generated entry file by plugins.</p>\n<h2>Install</h2>\n<p>First, create an empty folder, and <code>npm i pri</code>:</p>\n<pre><code class="language-bash">mkdir <span class="hljs-built_in">test</span>;\n<span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span>;\nnpm i pri --save;\n</code></pre>\n<p>Then, run <code>npx pri init</code>, and choose type: <code>Pri Plugin</code>.</p>\n<pre><code class="language-bash">npx pri init\n\n<span class="hljs-comment"># choose type: Pri Plugin</span>\n? Choose project <span class="hljs-built_in">type</span> (Use arrow keys)\n  Project\n  Component\n❯ Pri Plugin\n  Cli\n</code></pre>\n<blockquote>\n<p>No <code>npx</code>? Run <code>./node_modules/.bin/pri init</code></p>\n</blockquote>\n<h2>Plguin structor</h2>\n<pre><code>.\n├── .temp                     # Gitignored. Temporary file folder.\n├── coverage                  # Gitignored. Code coverage folder.\n├── dist                      # Gitignored. Dist folder, auto generated by `npm run build`.\n├── tests                     # Tests folder.\n├── src                       # Source files folder.\n│   ├── plugin                # Plugin real path\n│   └── index.ts              # Plugin entry.\n└── priconfig.json            # Config file.\n</code></pre>\n<h2>Introduce</h2>\n<p>Pri plugin load by entry file <code>./src/index.ts</code>, here is three import method you should to implement:</p>\n<pre><code class="language-tsx"><span class="hljs-comment">// Required. Normal plugin</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getPlugin = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">\'./plugin\'</span>);\n\n<span class="hljs-comment">// Optional. Web ui plugin</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getUIPlugins = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> [<span class="hljs-keyword">import</span>(<span class="hljs-string">\'./web-menu\'</span>), <span class="hljs-keyword">import</span>(<span class="hljs-string">\'./web-store\'</span>)];\n\n<span class="hljs-comment">// Required. Plugin config</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getConfig = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> ({\n  <span class="hljs-comment">// Required. Plugin name</span>\n  name: <span class="hljs-string">\'pri-plugin-dob\'</span>,\n  <span class="hljs-comment">// Optional. which plugin this plugin depend on. Plugin will be loaded after it dependences.</span>\n  dependencies: [<span class="hljs-string">\'pri-plugin-login\'</span>]\n});\n</code></pre>\n<h2>Plug-in loading mode</h2>\n<p>All the pri-plugin should be named like <code>pri-plugin-*</code> or <code>@ali/pri-plugin-*</code>, for example:</p>\n<ul>\n<li><code>pri-plugin-test</code></li>\n<li><code>pri-plugin-command-deploy</code></li>\n</ul>\n<p>For example:</p>\n<pre><code class="language-json">{\n  <span class="hljs-attr">"dependencies"</span>: {\n    <span class="hljs-attr">"pri"</span>: <span class="hljs-string">"*"</span>,\n    <span class="hljs-attr">"pri-plugin-test"</span>: <span class="hljs-string">"1.0.0"</span>\n  }\n}\n</code></pre>\n<p>And when you installed <code>pri</code>, <code>pri-plugin-test</code> at the same time in your project , the plug-in will be automatically loaded when any <code>pri</code> scripts are executed.</p>\n<blockquote>\n<p>You can also install pri-plugins in pri-plugin! This is a way to merge plug-in.</p>\n</blockquote>\n<h2>Debug plug-in</h2>\n<p>Change your npm path from project <code>package.json</code>:</p>\n<pre><code class="language-json">{\n  <span class="hljs-attr">"dependencies"</span>: {\n    <span class="hljs-attr">"pri"</span>: <span class="hljs-string">"*"</span>,\n    <span class="hljs-attr">"pri-plugin-test"</span>: <span class="hljs-string">"file:../pri-plugin-test"</span>\n  }\n}\n</code></pre>\n<p>And run <code>npm start</code> both in plugin and project root.</p>\n\n                  </div>\n              '}}]);