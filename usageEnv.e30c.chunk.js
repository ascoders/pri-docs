(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([[28],{155:function(n,e){n.exports='\n                  <div class="markdown-body">\n                    <h1>Env</h1>\n<p>You can use environment variable from <code>pri/client</code>:</p>\n<pre><code class="language-typescript"><span class="hljs-comment">// ./src/pages/index.tsx</span>\n<span class="hljs-keyword">import</span> { env } <span class="hljs-keyword">from</span> <span class="hljs-string">\'pri/client\'</span>;\n\n<span class="hljs-keyword">if</span> (env.isLocal) {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"I\'m running in local now!"</span>);\n}\n\n<span class="hljs-keyword">if</span> (env.isProd) {\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"I\'m running in production now!"</span>);\n}\n\n<span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Custom env\'</span>, env.get(<span class="hljs-string">\'theme\'</span>));\n</code></pre>\n<p><code>pri/client</code> has some built-in env, like <code>isLocal</code> and <code>isProd</code>.</p>\n<p>When execute <code>npm start</code>, <code>env.isLocal === true</code>, when execute <code>npm run build</code> or <code>npm run preview</code>, <code>env.isProd === true</code>.</p>\n<p>You can also set your own custom env variable in config files, and get them by using <code>env.get()</code>.</p>\n<pre><code class="language-json">// ./priconfig.json\n{\n  "env": {\n    "theme": "One Dark"\n  }\n}\n</code></pre>\n<ul>\n<li>After running <code>npm start</code>, <code>env.get()</code> will get from the map merged by <code>config.local.ts</code> and <code>config.default.ts</code></li>\n<li>After running <code>npm run build</code>, <code>env.get()</code> will get from the map merged by <code>config.prod.ts</code> and <code>config.default.ts</code></li>\n</ul>\n\n                  </div>\n              '}}]);