(("undefined"!=typeof self?self:this).webpackJsonp=("undefined"!=typeof self?self:this).webpackJsonp||[]).push([[37],{154:function(s,a){s.exports='\n                  <div class="markdown-body">\n                    <h1>pri-plugin-rematch · <a href="https://www.npmjs.com/package/pri-plugin-rematch"><img src="https://img.shields.io/npm/v/pri-plugin-rematch.svg?style=flat-square" alt="npm version"></a></h1>\n<p><a href="https://github.com/rematch/rematch">rematch</a> is a nice framework for redux.</p>\n<p>We provide <code>pri-plugin-rematch</code> to use it more easy!</p>\n<h2>Usage</h2>\n<pre><code class="language-bash">npm i pri-plugin-rematch\n</code></pre>\n<p>Let’s try it! For example, create a model named <code>user</code>:</p>\n<p><strong>src/models/user.ts</strong></p>\n<pre><code class="language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> model({\n  <span class="hljs-attr">state</span>: {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">\'jeck\'</span>,\n    <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>\n  },\n  <span class="hljs-attr">reducers</span>: {\n    <span class="hljs-attr">increment</span>: <span class="hljs-function">(<span class="hljs-params">state, count = <span class="hljs-number">1</span></span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> {\n        ...state,\n        <span class="hljs-attr">age</span>: state.age + count\n      };\n    }\n  },\n  <span class="hljs-attr">effects</span>: {\n    <span class="hljs-keyword">async</span> asyncIncrement() {\n      <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> {\n        setTimeout(resolve, <span class="hljs-number">1000</span>);\n      });\n      <span class="hljs-keyword">this</span>.increment(<span class="hljs-number">5</span>);\n    }\n  }\n});\n</code></pre>\n<blockquote>\n<p>To enhance typescript support for model, we provide a model function here:</p>\n</blockquote>\n<pre><code class="language-typescript"><span class="hljs-keyword">const</span> model = <span class="xml"><span class="hljs-tag">&lt;\n  <span class="hljs-attr">State</span>,\n  <span class="hljs-attr">Reducers</span> <span class="hljs-attr">extends</span> {\n    [<span class="hljs-attr">key:</span> <span class="hljs-attr">string</span>]<span class="hljs-attr">:</span> (<span class="hljs-attr">state</span>?<span class="hljs-attr">:</span> <span class="hljs-attr">State</span>, <span class="hljs-attr">payload</span>?<span class="hljs-attr">:</span> <span class="hljs-attr">any</span>) =&gt;</span> State;\n  }\n&gt;(obj: {\n  state: State;\n  reducers: Reducers;\n  effects: {\n    [key: string]: (this: any, ...args: any[]) =&gt; void;\n  };\n}) =&gt; {\n  return obj;\n};\n</span></code></pre>\n<p>Then, use it in pages!</p>\n<p><strong>src/pages/index.tsx</strong></p>\n<pre><code class="language-typescript"><span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'pri/models\'</span>;\n\n@connect(\n  <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> {\n    <span class="hljs-keyword">return</span> {\n      <span class="hljs-attr">age</span>: state.user.age\n    };\n  },\n  dispatch =&gt; {\n    <span class="hljs-keyword">return</span> { <span class="hljs-attr">increment</span>: dispatch.user.increment, <span class="hljs-attr">asyncIncrement</span>: dispatch.user.asyncIncrement };\n  }\n)\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">PureComponent</span>&lt;<span class="hljs-title">Props</span>, <span class="hljs-title">State</span>&gt; </span>{\n  <span class="hljs-comment">/**/</span>\n}\n</code></pre>\n<blockquote>\n<p>Import connect from ‘pri/models’ is a better way, ‘pri/models’ provides a strong typed <code>connect</code> function:</p>\n</blockquote>\n<img src="https://user-images.githubusercontent.com/7970947/39965212-62615908-56c7-11e8-9084-081734eaf280.png" width=400>\n\n                  </div>\n              '}}]);