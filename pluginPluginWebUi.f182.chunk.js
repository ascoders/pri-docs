(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{174:function(s,n){s.exports='\n                  <div class="markdown-body">\n                    <h1>Web UI</h1>\n<p>You can extend web ui in your plugin.</p>\n<p>First, set your <code>web-entry</code> path in plugin’s <code>package.json</code>:</p>\n<pre><code class="language-json">{\n  <span class="hljs-attr">"pri"</span>: {\n    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"plugin"</span>,\n    <span class="hljs-attr">"web-entry"</span>: <span class="hljs-string">"./built/src/web/index.js"</span>\n  }\n}\n</code></pre>\n<p>Then, create file <code>./src/web/index.tsx</code>:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">View</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>, <span class="hljs-title">any</span>&gt; </span>{\n  public render() {\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">position</span>: <span class="hljs-string">\'menu\'</span>,\n  <span class="hljs-attr">view</span>: View，\n  init: <span class="hljs-function">(<span class="hljs-params">applicationAction: any</span>) =&gt;</span> {}\n};\n</code></pre>\n<p>Then, you plugin will be loaded into the hole of <code>menu</code>.</p>\n<h2>Debug webui</h2>\n<p>You can debug webui by execute <code>npx pri dev -d</code> in your project!</p>\n<p>Don’t forget to execute <code>npm start</code> in your plugin’s dir.</p>\n<h2>Position enums</h2>\n<p>Here is all positions in the webUI:</p>\n<img src="https://user-images.githubusercontent.com/7970947/39683416-de6ba0f6-51e7-11e8-9a6e-124f63ba4415.png" width=800 />\n<h3><code>menu</code></h3>\n<p>Append menu on the top bar. You can add some operate button here.</p>\n<h3><code>tree-[name]</code></h3>\n<p>When user click the left tree, for example <code>routes</code>, <code>tree-routes</code> will be rendered on the right.</p>\n<p>So you can register both tree and <code>tree-[name]</code>, and make sure they have same keys.</p>\n<h2>applicationAction</h2>\n<p>We can control webUI using <code>applicationAction</code>, and we can get it on the <code>init</code> callback:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">View</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>, <span class="hljs-title">any</span>&gt; </span>{}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">position</span>: <span class="hljs-string">\'menu\'</span>,\n  <span class="hljs-attr">view</span>: View，\n  init: <span class="hljs-function">(<span class="hljs-params">applicationAction: any</span>) =&gt;</span> {\n    <span class="hljs-comment">// Access applicationAction</span>\n  }\n};\n</code></pre>\n<h3>get analyseInfo</h3>\n<p>we can get analyseInfo from webUI, you can access it in <code>applicationAction.applicationStore.status.analyseInfo</code>.</p>\n<h3>event</h3>\n<p>TODO</p>\n<h3>pipeTreeNode</h3>\n<p>We can expend left tree on the webui:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">import</span> { Icon } <span class="hljs-keyword">from</span> <span class="hljs-string">\'antd\'</span>;\n\n<span class="hljs-keyword">const</span> TreeIcon = <span class="hljs-function">(<span class="hljs-params">props: any</span>) =&gt;</span> &lt;Icon style={{ <span class="hljs-attr">marginRight</span>: <span class="hljs-number">5</span> }} {...props} /&gt;;\n\napplicationAction.pipeTreeNode(<span class="hljs-function">(<span class="hljs-params">treeData: any</span>) =&gt;</span> {\n  treeData[<span class="hljs-number">0</span>].children.push({\n    <span class="hljs-attr">key</span>: <span class="hljs-string">\'project-analyse\'</span>,\n    <span class="hljs-attr">title</span>: <span class="hljs-string">`ProjectAnalyse`</span>,\n    <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TreeIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"setting"</span> /&gt;</span>,\n    children: [\n      // The same structor with parent, and can be empty.\n    ]\n  });\n  return treeData;\n});\n</span></code></pre>\n<p>In above code, we register a new tree element:</p>\n<img src="https://user-images.githubusercontent.com/7970947/39683744-c252c474-51e9-11e8-932c-de87f1aa3bcf.png" width=240 />\n<p>And when we click it, <code>tree-project-analyse</code> will be loaded on the right area:</p>\n<img src="https://user-images.githubusercontent.com/7970947/39683806-1b60d3a8-51ea-11e8-90df-3058941bcdd1.png" width=800 />\n<p>So we can set position to <code>tree-project-analyse</code> to hold it:</p>\n<pre><code class="language-tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">position</span>: <span class="hljs-string">\'tree-project-analyse\'</span>,\n  <span class="hljs-attr">view</span>: View，\n  init: <span class="hljs-function">(<span class="hljs-params">applicationAction: any</span>) =&gt;</span> {\n    <span class="hljs-comment">// Access applicationAction</span>\n  }\n};\n</code></pre>\n<h3>fetch</h3>\n<p>We can communicatie with the node code in webUI.</p>\n<p>Here is an example, first, we register a web socket callback in <code>src/index.tsx</code>:</p>\n<pre><code class="language-typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> (instance: <span class="hljs-keyword">typeof</span> pri) =&gt; {\n  instance.devService.on(<span class="hljs-string">\'someName\'</span>, <span class="hljs-keyword">async</span> clientData =&gt; {\n    <span class="hljs-comment">// Get data here</span>\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'nice to meet you\'</span>;\n  });\n};\n</code></pre>\n<p>And we can trigger it, when calling <code>fetch</code> in webUI:</p>\n<pre><code class="language-typescript"><span class="hljs-keyword">import</span> { Connect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'dob-react\'</span>;\n\n@Connect\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebuiPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">PureComponent</span>&lt;<span class="hljs-title">Props</span>, <span class="hljs-title">State</span>&gt; </span>{\n  onClick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n    <span class="hljs-keyword">const</span> serverData = <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.props.ApplicationAction.fetch(<span class="hljs-string">\'someName\'</span>, <span class="hljs-string">\'hello\'</span>);\n  };\n}\n</code></pre>\n<p>So, we send <code>hello</code> to node from webUI, and the <code>clientData</code> equals to <code>hello</code>, and in webUI, the <code>serverData</code> equals to <code>nice to meet you</code></p>\n\n                  </div>\n              '}}]);